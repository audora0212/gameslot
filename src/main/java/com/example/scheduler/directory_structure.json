{
    "__files__": {
        "codes.py": null,
        "directory_structure.json": null,
        "SchedulerApplication.java": "package com.example.scheduler;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class SchedulerApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(SchedulerApplication.class, args);\n\t}\n\n}\n"
    },
    "controller": {
        "__files__": {
            "AuthController.java": "package com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.AuthDto;\nimport com.example.scheduler.service.AuthService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.AuthenticationException;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/api/auth\")\n@RequiredArgsConstructor\npublic class AuthController {\n    private final AuthService authService;\n\n    @PostMapping(\"/signup\")\n    public ResponseEntity<AuthDto.SignupResponse> signup(@RequestBody AuthDto.SignupRequest req) {\n        authService.signup(req);\n        return ResponseEntity\n                .ok(new AuthDto.SignupResponse(\"회원가입이 완료되었습니다\"));\n    }\n\n    @PostMapping(\"/login\")\n    public ResponseEntity<?> login(@RequestBody AuthDto.LoginRequest req) {\n        try {\n            String token = authService.login(req);\n            return ResponseEntity.ok(new AuthDto.LoginResponse(token, \"로그인 성공\"));\n        } catch (AuthenticationException ex) {\n            // 잘못된 자격증명일 경우 401 상태와 메시지\n            return ResponseEntity\n                    .status(HttpStatus.UNAUTHORIZED)\n                    .body(Map.of(\"message\", \"아이디 또는 비밀번호가 올바르지 않습니다\"));\n        }\n    }\n}\n",
            "GameController.java": "package com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.GameDto;\nimport com.example.scheduler.service.GameService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api\")\n@RequiredArgsConstructor\npublic class GameController {\n    private final GameService gameService;\n\n    // 모든 기본 게임 조회\n    @GetMapping(\"/games/default\")\n    public ResponseEntity<GameDto.DefaultGameListResponse> getDefaultGames() {\n        List<GameDto.DefaultGameResponse> list = gameService.listAllDefault();\n        return ResponseEntity.ok(new GameDto.DefaultGameListResponse(list));\n    }\n\n    // 서버별 커스텀 게임 조회\n    @GetMapping(\"/servers/{serverId}/custom-games\")\n    public ResponseEntity<GameDto.CustomGameListResponse> getCustomGames(\n            @PathVariable Long serverId\n    ) {\n        List<GameDto.CustomGameResponse> list = gameService.listCustomByServer(serverId);\n        return ResponseEntity.ok(new GameDto.CustomGameListResponse(list));\n    }\n\n    // 서버별 커스텀 게임 추가\n    @PostMapping(\"/servers/{serverId}/custom-games\")\n    public ResponseEntity<GameDto.CustomGameResponse> addCustomGame(\n            @PathVariable Long serverId,\n            @RequestBody GameDto.CustomGameRequest req\n    ) {\n        GameDto.CustomGameResponse created = gameService.addCustomGame(serverId, req);\n        return ResponseEntity.ok(created);\n    }\n}\n",
            "ServerController.java": "// controller/ServerController.java\npackage com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.ServerDto;\nimport com.example.scheduler.service.ServerService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\n\n@RestController\n@RequestMapping(\"/api/servers\")\n@RequiredArgsConstructor\npublic class ServerController {\n    private final ServerService serverService;\n\n    @PostMapping\n    public ResponseEntity<ServerDto.Response> create(@RequestBody ServerDto.CreateRequest req) {\n        return ResponseEntity.ok(serverService.create(req));\n    }\n\n    @PostMapping(\"/{id}/join\")\n    public ResponseEntity<ServerDto.Response> join(@PathVariable Long id) {\n        return ResponseEntity.ok(serverService.join(id));\n    }\n}",
            "TimetableController.java": "// controller/TimetableController.java\npackage com.example.scheduler.controller;\n\nimport com.example.scheduler.dto.TimetableDto;\nimport com.example.scheduler.service.TimetableService;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.web.bind.annotation.*;\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/api/servers/{serverId}/timetable\")\n@RequiredArgsConstructor\npublic class TimetableController {\n    private final TimetableService timetableService;\n\n    @PostMapping\n    public ResponseEntity<TimetableDto.EntryResponse> add(\n            @PathVariable Long serverId,\n            @RequestBody TimetableDto.EntryRequest req) {\n        req.setServerId(serverId);\n        return ResponseEntity.ok(timetableService.add(req));\n    }\n\n    @GetMapping\n    public ResponseEntity<List<TimetableDto.EntryResponse>> list(\n            @PathVariable Long serverId,\n            @RequestParam(required = false) String game,\n            @RequestParam(defaultValue = \"false\") boolean sortByGame) {\n        return ResponseEntity.ok(timetableService.list(serverId, game, sortByGame));\n    }\n\n    @GetMapping(\"/stats\")\n    public ResponseEntity<TimetableDto.StatsResponse> stats(@PathVariable Long serverId) {\n        return ResponseEntity.ok(timetableService.stats(serverId));\n    }\n}"
        }
    },
    "domain": {
        "__files__": {
            "CustomGame.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class CustomGame {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String name;\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"server_id\")\n    private Server server;\n}\n",
            "DefaultGame.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class DefaultGame {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false, unique = true)\n    private String name;\n}\n",
            "Server.java": "// domain/Server.java\npackage com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.util.Set;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class Server {\n    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(nullable = false)\n    private String name;\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"owner_id\")\n    private User owner;\n\n    @ManyToMany\n    @JoinTable(name = \"server_members\",\n            joinColumns = @JoinColumn(name = \"server_id\"),\n            inverseJoinColumns = @JoinColumn(name = \"user_id\"))\n    private Set<User> members;\n\n    @OneToMany(mappedBy = \"server\", cascade = CascadeType.ALL, orphanRemoval = true)\n    private Set<TimetableEntry> entries;\n}",
            "TimetableEntry.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.time.LocalDateTime;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class TimetableEntry {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"server_id\")\n    private Server server;\n\n    @ManyToOne(optional = false)\n    @JoinColumn(name = \"user_id\")\n    private User user;\n\n    @Column(nullable = false)\n    private LocalDateTime slot;\n\n    @ManyToOne\n    @JoinColumn(name = \"default_game_id\")\n    private DefaultGame defaultGame;\n\n    @ManyToOne\n    @JoinColumn(name = \"custom_game_id\")\n    private CustomGame customGame;\n}\n",
            "User.java": "package com.example.scheduler.domain;\n\nimport jakarta.persistence.*;\nimport lombok.*;\nimport java.util.Set;\n\n@Entity\n@Getter @Setter @NoArgsConstructor @AllArgsConstructor @Builder\npublic class User {\n    @Id @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true, nullable = false)\n    private String username;\n\n    @Column(nullable = false)\n    private String password;\n\n    @ManyToMany(mappedBy = \"members\")\n    private Set<Server> joinedServers;\n}"
        }
    },
    "dto": {
        "__files__": {
            "AuthDto.java": "package com.example.scheduler.dto;\n\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\n\npublic class AuthDto {\n    @Data public static class SignupRequest { private String username; private String password; }\n    @Data @AllArgsConstructor public static class SignupResponse { private String message; }\n\n    @Data public static class LoginRequest  { private String username; private String password; }\n    @Data @AllArgsConstructor public static class LoginResponse  {\n        private String token;\n        private String message;\n    }\n}\n",
            "GameDto.java": "package com.example.scheduler.dto;\n\nimport lombok.*;\nimport java.util.List;\n\npublic class GameDto {\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class DefaultGameResponse {\n        private Long id;\n        private String name;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class CustomGameRequest {\n        private String name;\n    }\n\n    @Data\n    @NoArgsConstructor\n    @AllArgsConstructor\n    public static class CustomGameResponse {\n        private Long id;\n        private String name;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class DefaultGameListResponse {\n        private List<DefaultGameResponse> defaultGames;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class CustomGameListResponse {\n        private List<CustomGameResponse> customGames;\n    }\n}\n",
            "ServerDto.java": "// dto/ServerDto.java\npackage com.example.scheduler.dto;\n\nimport lombok.*;\nimport java.util.Set;\n\npublic class ServerDto {\n    @Data public static class CreateRequest { private String name; }\n    @Data public static class Response {\n        private Long id; private String name; private String owner; private Set<String> members;\n    }\n}",
            "TimetableDto.java": "package com.example.scheduler.dto;\n\nimport lombok.Data;\nimport lombok.AllArgsConstructor;\nimport java.time.LocalDateTime;\n\npublic class TimetableDto {\n    @Data\n    public static class EntryRequest {\n        private Long serverId;\n        private LocalDateTime slot;\n        private Long defaultGameId;\n        private Long customGameId;\n    }\n\n    @Data\n    public static class EntryResponse {\n        private Long id;\n        private String user;\n        private LocalDateTime slot;\n        private Long gameId;\n        private String gameName;\n        private boolean custom;\n    }\n\n    @Data\n    @AllArgsConstructor\n    public static class StatsResponse {\n        private String topGame;\n        private LocalDateTime avgSlot;\n        private LocalDateTime peakSlot;\n        private int peakCount;\n    }\n}\n"
        }
    },
    "repository": {
        "__files__": {
            "CustomGameRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.Server;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.List;\n\npublic interface CustomGameRepository extends JpaRepository<CustomGame, Long> {\n    List<CustomGame> findByServer(Server server);\n}\n",
            "DefaultGameRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.DefaultGame;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface DefaultGameRepository extends JpaRepository<DefaultGame, Long> {\n    Optional<DefaultGame> findByName(String name);\n}\n",
            "ServerRepository.java": "// repository/ServerRepository.java\npackage com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.Server;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\npublic interface ServerRepository extends JpaRepository<Server, Long> {}\n",
            "TimetableEntryRepository.java": "package com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.TimetableEntry;\nimport com.example.scheduler.domain.Server;\nimport org.springframework.data.jpa.repository.JpaRepository;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\npublic interface TimetableEntryRepository extends JpaRepository<TimetableEntry, Long> {\n    // 서버 기준으로 슬롯 오름차순 조회\n    List<TimetableEntry> findByServerOrderBySlot(Server server);\n\n    // 특정 슬롯에 있는 엔트리 조회 (필요 시 사용)\n    List<TimetableEntry> findByServerAndSlot(Server server, LocalDateTime slot);\n}\n",
            "UserRepository.java": "// repository/UserRepository.java\npackage com.example.scheduler.repository;\n\nimport com.example.scheduler.domain.User;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport java.util.Optional;\n\npublic interface UserRepository extends JpaRepository<User, Long> {\n    Optional<User> findByUsername(String username);\n    boolean existsByUsername(String username);\n}"
        }
    },
    "security": {
        "__files__": {
            "JwtAuthenticationFilter.java": "// security/JwtAuthenticationFilter.java\npackage com.example.scheduler.security;\n\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.web.authentication.WebAuthenticationDetailsSource;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.web.filter.OncePerRequestFilter;\nimport jakarta.servlet.FilterChain;\nimport jakarta.servlet.ServletException;\nimport jakarta.servlet.http.HttpServletRequest;\nimport jakarta.servlet.http.HttpServletResponse;\nimport lombok.RequiredArgsConstructor;\n\nimport java.io.IOException;\n\n@RequiredArgsConstructor\npublic class JwtAuthenticationFilter extends OncePerRequestFilter {\n    private final JwtTokenProvider tokenProvider;\n    private final UserDetailsService userDetailsService;\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request,\n                                    HttpServletResponse response,\n                                    FilterChain chain)\n            throws IOException, ServletException {\n        String path = request.getServletPath();\n        // 인증이 필요 없는 엔드포인트 (/api/auth/**)는 필터링하지 않음\n        if (path.startsWith(\"/api/auth/\")) {\n            chain.doFilter(request, response);\n            return;\n        }\n\n        String header = request.getHeader(\"Authorization\");\n        if (header != null && header.startsWith(\"Bearer \")) {\n            String token = header.substring(7);\n            if (tokenProvider.validateToken(token)) {\n                String username = tokenProvider.getUsername(token);\n                UserDetails userDetails = userDetailsService.loadUserByUsername(username);\n                UsernamePasswordAuthenticationToken auth =\n                        new UsernamePasswordAuthenticationToken(\n                                userDetails,\n                                null,\n                                userDetails.getAuthorities()\n                        );\n                auth.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));\n                SecurityContextHolder.getContext().setAuthentication(auth);\n            }\n        }\n\n        chain.doFilter(request, response);\n    }\n}\n",
            "JwtTokenProvider.java": "package com.example.scheduler.security;\n\nimport io.jsonwebtoken.*;\nimport io.jsonwebtoken.io.Decoders;\nimport io.jsonwebtoken.security.Keys;\nimport jakarta.annotation.PostConstruct;\nimport org.springframework.beans.factory.annotation.Value;\nimport org.springframework.stereotype.Component;\n\nimport java.security.Key;\nimport java.util.Date;\n\n@Component\npublic class JwtTokenProvider {\n\n    @Value(\"${jwt.secret}\")\n    private String secretBase64;\n\n    @Value(\"${jwt.expiration-ms}\")\n    private long validityInMs;\n\n    private Key key;\n\n    @PostConstruct\n    public void init() {\n        byte[] keyBytes = Decoders.BASE64.decode(secretBase64);\n        this.key = Keys.hmacShaKeyFor(keyBytes);\n    }\n\n    public String createToken(String username) {\n        Claims claims = Jwts.claims().setSubject(username);\n        Date now = new Date();\n        Date expiry = new Date(now.getTime() + validityInMs);\n\n        return Jwts.builder()\n                .setClaims(claims)\n                .setIssuedAt(now)\n                .setExpiration(expiry)\n                // Key 객체와 알고리즘을 함께 넘깁니다.\n                .signWith(key, SignatureAlgorithm.HS256)\n                .compact();\n    }\n\n    public String getUsername(String token) {\n        return Jwts.parserBuilder()\n                .setSigningKey(key)\n                .build()\n                .parseClaimsJws(token)\n                .getBody()\n                .getSubject();\n    }\n\n    public boolean validateToken(String token) {\n        try {\n            Jwts.parserBuilder()\n                    .setSigningKey(key)\n                    .build()\n                    .parseClaimsJws(token);\n            return true;\n        } catch (JwtException | IllegalArgumentException e) {\n            return false;\n        }\n    }\n}\n",
            "SecurityConfig.java": "package com.example.scheduler.security;\n\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.beans.factory.annotation.Autowired;\n\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\n\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\n\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.PasswordEncoder;\n\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\n@Configuration\n@EnableWebSecurity\npublic class SecurityConfig {\n\n    @Autowired\n    private JwtTokenProvider tokenProvider;\n\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {\n        JwtAuthenticationFilter jwtFilter =\n                new JwtAuthenticationFilter(tokenProvider, userDetailsService);\n\n        http\n                // CSRF 비활성화\n                .csrf(AbstractHttpConfigurer::disable)\n\n                // 세션을 사용하지 않고 JWT로 인증\n                .sessionManagement(session ->\n                        session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)\n                )\n\n                // 엔드포인트별 인가 규칙\n                .authorizeHttpRequests(auth -> auth\n                        .requestMatchers(\"/api/auth/**\").permitAll()\n                        .anyRequest().authenticated()\n                )\n\n                // JWT 인증 필터 등록\n                .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n\n        return http.build();\n    }\n\n    @Bean\n    public PasswordEncoder passwordEncoder() {\n        return new BCryptPasswordEncoder();\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(\n            AuthenticationConfiguration config\n    ) throws Exception {\n        return config.getAuthenticationManager();\n    }\n}\n"
        }
    },
    "service": {
        "__files__": {
            "AuthService.java": "// service/AuthService.java\npackage com.example.scheduler.service;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.AuthDto;\nimport com.example.scheduler.repository.UserRepository;\nimport com.example.scheduler.security.JwtTokenProvider;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.crypto.password.PasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.UserDetailsService;\n\n@Service\n@RequiredArgsConstructor\npublic class AuthService {\n    private final UserRepository userRepo;\n    private final PasswordEncoder encoder;\n    private final AuthenticationManager authManager;\n    private final JwtTokenProvider jwtProvider;\n\n    public void signup(AuthDto.SignupRequest req) {\n        if (userRepo.existsByUsername(req.getUsername())) {\n            throw new RuntimeException(\"Username already in use\");\n        }\n        User user = User.builder()\n                .username(req.getUsername())\n                .password(encoder.encode(req.getPassword()))\n                .build();\n        userRepo.save(user);\n    }\n\n    public String login(AuthDto.LoginRequest req) {\n        Authentication auth = authManager.authenticate(\n                new UsernamePasswordAuthenticationToken(req.getUsername(), req.getPassword()));\n        return jwtProvider.createToken(auth.getName());\n    }\n}",
            "CustomUserDetailsService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.stereotype.Service;\nimport org.springframework.security.core.authority.SimpleGrantedAuthority;\nimport java.util.Collections;\n\n@Service\n@RequiredArgsConstructor\npublic class CustomUserDetailsService implements UserDetailsService {\n    private final UserRepository userRepository;\n\n    @Override\n    public UserDetails loadUserByUsername(String username) throws UsernameNotFoundException {\n        User user = userRepository.findByUsername(username)\n                .orElseThrow(() -> new UsernameNotFoundException(\"User not found: \" + username));\n        return new org.springframework.security.core.userdetails.User(\n                user.getUsername(),\n                user.getPassword(),\n                Collections.singletonList(new SimpleGrantedAuthority(\"ROLE_USER\"))\n        );\n    }\n}\n",
            "GameService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.CustomGame;\nimport com.example.scheduler.domain.DefaultGame;\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.dto.GameDto;\nimport com.example.scheduler.repository.CustomGameRepository;\nimport com.example.scheduler.repository.DefaultGameRepository;\nimport com.example.scheduler.repository.ServerRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.util.List;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class GameService {\n    private final DefaultGameRepository defaultGameRepo;\n    private final CustomGameRepository customGameRepo;\n    private final ServerRepository serverRepo;\n\n    // 기본 게임 전체 조회\n    public List<GameDto.DefaultGameResponse> listAllDefault() {\n        return defaultGameRepo.findAll().stream()\n                .map(dg -> new GameDto.DefaultGameResponse(dg.getId(), dg.getName()))\n                .collect(Collectors.toList());\n    }\n\n    // 서버별 커스텀 게임 조회\n    public List<GameDto.CustomGameResponse> listCustomByServer(Long serverId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다.\"));\n        return customGameRepo.findByServer(srv).stream()\n                .map(cg -> new GameDto.CustomGameResponse(cg.getId(), cg.getName()))\n                .collect(Collectors.toList());\n    }\n\n    // 서버별 커스텀 게임 추가\n    public GameDto.CustomGameResponse addCustomGame(Long serverId, GameDto.CustomGameRequest req) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND, \"서버를 찾을 수 없습니다.\"));\n        CustomGame cg = CustomGame.builder()\n                .name(req.getName())\n                .server(srv)\n                .build();\n        cg = customGameRepo.save(cg);\n        return new GameDto.CustomGameResponse(cg.getId(), cg.getName());\n    }\n}\n",
            "ServerService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.Server;\nimport com.example.scheduler.domain.User;\nimport com.example.scheduler.dto.ServerDto;\nimport com.example.scheduler.repository.ServerRepository;\nimport com.example.scheduler.repository.UserRepository;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.stereotype.Service;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.web.server.ResponseStatusException;\nimport org.springframework.http.HttpStatus;\n\nimport java.util.Set;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class ServerService {\n    private final ServerRepository serverRepo;\n    private final UserRepository userRepo;\n\n    public ServerDto.Response create(ServerDto.CreateRequest req) {\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\n        User owner = userRepo.findByUsername(username).orElseThrow();\n        Server srv = Server.builder()\n                .name(req.getName())\n                .owner(owner)\n                .members(Set.of(owner))\n                .build();\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    public ServerDto.Response join(Long serverId) {\n        String username = SecurityContextHolder.getContext().getAuthentication().getName();\n        User user = userRepo.findByUsername(username).orElseThrow();\n        Server srv = serverRepo.findById(serverId).orElseThrow();\n\n        // 이미 참가한 서버인지 검사\n        if (srv.getMembers().contains(user)) {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"이미 참가한 서버\");\n        }\n\n        srv.getMembers().add(user);\n        serverRepo.save(srv);\n        return toDto(srv);\n    }\n\n    private ServerDto.Response toDto(Server s) {\n        ServerDto.Response res = new ServerDto.Response();\n        res.setId(s.getId());\n        res.setName(s.getName());\n        res.setOwner(s.getOwner().getUsername());\n        res.setMembers(s.getMembers().stream().map(User::getUsername).collect(Collectors.toSet()));\n        return res;\n    }\n}\n",
            "TimetableService.java": "package com.example.scheduler.service;\n\nimport com.example.scheduler.domain.*;\nimport com.example.scheduler.dto.TimetableDto;\nimport com.example.scheduler.repository.*;\nimport jakarta.transaction.Transactional;\nimport lombok.RequiredArgsConstructor;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.server.ResponseStatusException;\n\nimport java.time.LocalDateTime;\nimport java.time.temporal.ChronoUnit;\nimport java.util.Comparator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.stream.Collectors;\n\n@Service\n@RequiredArgsConstructor\npublic class TimetableService {\n    private final TimetableEntryRepository entryRepo;\n    private final ServerRepository serverRepo;\n    private final UserRepository userRepo;\n    private final DefaultGameRepository defaultGameRepo;\n    private final CustomGameRepository customGameRepo;\n\n    @Transactional\n    public TimetableDto.EntryResponse add(TimetableDto.EntryRequest req) {\n        User user = userRepo.findByUsername(\n                SecurityContextHolder.getContext().getAuthentication().getName()\n        ).orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        Server srv = serverRepo.findById(req.getServerId())\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        entryRepo.findByServerAndSlot(srv, req.getSlot().truncatedTo(ChronoUnit.MINUTES))\n                .stream()\n                .filter(e -> e.getUser().getId().equals(user.getId()))\n                .findFirst()\n                .ifPresent(entryRepo::delete);\n\n        TimetableEntry e = TimetableEntry.builder()\n                .server(srv)\n                .user(user)\n                .slot(req.getSlot().truncatedTo(ChronoUnit.MINUTES))\n                .build();\n\n        if (req.getCustomGameId() != null) {\n            CustomGame cg = customGameRepo.findById(req.getCustomGameId())\n                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid customGameId\"));\n            e.setCustomGame(cg);\n        } else if (req.getDefaultGameId() != null) {\n            DefaultGame dg = defaultGameRepo.findById(req.getDefaultGameId())\n                    .orElseThrow(() -> new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Invalid defaultGameId\"));\n            e.setDefaultGame(dg);\n        } else {\n            throw new ResponseStatusException(HttpStatus.BAD_REQUEST, \"Game ID is required\");\n        }\n\n        entryRepo.save(e);\n        return toResp(e);\n    }\n\n    public List<TimetableDto.EntryResponse> list(\n            Long serverId, String gameName, boolean sortByGame\n    ) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n\n        // 1) 서버 전체 엔트리 조회\n        List<TimetableEntry> list = entryRepo.findByServerOrderBySlot(srv);\n\n        // 2) 이름 기준 필터링 (gameName 파라미터 존재 시)\n        if (gameName != null) {\n            list = list.stream()\n                    .filter(e -> {\n                        String name = (e.getCustomGame() != null)\n                                ? e.getCustomGame().getName()\n                                : e.getDefaultGame().getName();\n                        return name.equals(gameName);\n                    })\n                    .collect(Collectors.toList());\n        }\n\n        // 3) 게임명 기준 정렬\n        if (sortByGame) {\n            list.sort(Comparator.comparing(e -> {\n                return (e.getCustomGame() != null)\n                        ? e.getCustomGame().getName()\n                        : e.getDefaultGame().getName();\n            }));\n        }\n\n        return list.stream().map(this::toResp).collect(Collectors.toList());\n    }\n\n    public TimetableDto.StatsResponse stats(Long serverId) {\n        Server srv = serverRepo.findById(serverId)\n                .orElseThrow(() -> new ResponseStatusException(HttpStatus.NOT_FOUND));\n        List<TimetableEntry> list = entryRepo.findByServerOrderBySlot(srv);\n\n        // 최다 플레이 게임\n        String topGame = list.stream()\n                .collect(Collectors.groupingBy(e -> {\n                    return (e.getCustomGame() != null)\n                            ? e.getCustomGame().getName()\n                            : e.getDefaultGame().getName();\n                }, Collectors.counting()))\n                .entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .get().getKey();\n\n        // 슬롯별 카운트\n        Map<LocalDateTime, Long> slotCounts = list.stream()\n                .collect(Collectors.groupingBy(TimetableEntry::getSlot, Collectors.counting()));\n\n        // 피크 슬롯과 평균 슬롯\n        LocalDateTime peakSlot = slotCounts.entrySet().stream()\n                .max(Map.Entry.comparingByValue())\n                .get().getKey();\n\n        double avgMinute = list.stream()\n                .mapToLong(e -> e.getSlot().getHour() * 60 + e.getSlot().getMinute())\n                .average().orElse(0);\n\n        LocalDateTime avgSlot = LocalDateTime.now()\n                .withHour((int)avgMinute / 60)\n                .withMinute((int)avgMinute % 60)\n                .truncatedTo(ChronoUnit.MINUTES);\n\n        int peakCount = slotCounts.get(peakSlot).intValue();\n        return new TimetableDto.StatsResponse(topGame, avgSlot, peakSlot, peakCount);\n    }\n\n    private TimetableDto.EntryResponse toResp(TimetableEntry e) {\n        TimetableDto.EntryResponse r = new TimetableDto.EntryResponse();\n        r.setId(e.getId());\n        r.setUser(e.getUser().getUsername());\n        r.setSlot(e.getSlot());\n        if (e.getCustomGame() != null) {\n            r.setGameId(e.getCustomGame().getId());\n            r.setGameName(e.getCustomGame().getName());\n            r.setCustom(true);\n        } else {\n            r.setGameId(e.getDefaultGame().getId());\n            r.setGameName(e.getDefaultGame().getName());\n            r.setCustom(false);\n        }\n        return r;\n    }\n}\n"
        }
    }
}